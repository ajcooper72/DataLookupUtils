<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GetFieldValuesAjax</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>GetFieldValuesAjax</name>
        <script><![CDATA[var GetFieldValuesAjax = Class.create();
GetFieldValuesAjax.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	getValues: function() {
		var table = this.getParameter("sysparm_table_name");
        var sys_id = this.getParameter("sysparm_sys_id");
        var fields = '' + this.getParameter("sysparm_field_names");

		return JSON.stringify(
            this._getValues(table, sys_id, fields.split(','))
        );
	},
	
    /**SNDOC
     @name _getValues
     @private
     @description 
     Get the requested values from the table/record specified.
	 Uses GlideRecord to allow for dot-walking and top-level values from the same field
     @param {string} [table_name]- table to get record from
     @param {string} [record_sys_id] - sys_id of record to query
     @param {array} [field_names] - list of field names to retrieve
     @returns {JSON} JSON object containing each field and its display equivalent
     @example
     _getValues('sys_user', '62826bf03710200044e0bfc8bcbe5df1', ['user_name', 'first_name', 'last_name', 'email', 'manager.email' ])
    */
    _getValues: function(table, sys_id, fields) {
        var json = {};
        try {

            var gr = new GlideRecord(table);
            gr.get(sys_id);

            fields.forEach(function(_field) {
                var ge = gr.getElement(_field);
                if (ge) {
                    json[_field] = {
                        "value": ge.getValue(),
                        "displayValue": ge.getDisplayValue()
                    };
                }
            });
            return json;
        } catch (e) {
            gs.error("(GetFieldValuesAjax) Problem getting field values " + e.toString());
            return {};
        }
    },

    /**SNDOC
     @name _getValidFieldNames
     @private
     @description 
     Get a list of valid fields for the table
     @param {string} [table_name]- table to get record from
     @param {array} [field_names] - list of field names to check
     @returns {array} List of valid field names
    */
    _getValidFieldNames: function(table_name, field_names) {
        // get an instance of the table so we can check the fields
        var grCheckTable = new GlideRecord(table_name);
        grCheckTable.initialize();

        var validFields = field_names.map(function(_field) {
            var fieldName = _field.split('.')[0];
            if (grCheckTable.isValidField(fieldName)) {
                return _field;
            } else {
                gs.error(gs.getMessage("(GetFieldValuesAjax) Field {0} is not a valid field on table {1}",
                    [_field, table_name]));
            }
        }).filter(Boolean);

        return validFields;
    },

	
    isPublic: function() {
		return true;
    },

    type: 'GetFieldValuesAjax'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-04 12:38:55</sys_created_on>
        <sys_id>6bd815bc1b0e2510c5ba97d7bd4bcb10</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>GetFieldValuesAjax</sys_name>
        <sys_package display_value="Data Lookup Utils" source="d5f34f7a1bf56110c5ba97d7bd4bcb26">d5f34f7a1bf56110c5ba97d7bd4bcb26</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Lookup Utils">d5f34f7a1bf56110c5ba97d7bd4bcb26</sys_scope>
        <sys_update_name>sys_script_include_6bd815bc1b0e2510c5ba97d7bd4bcb10</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-04 13:42:07</sys_updated_on>
    </sys_script_include>
</record_update>
