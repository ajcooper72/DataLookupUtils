<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.DataLookupUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DataLookupUtils</name>
        <script><![CDATA[var DataLookupUtils = Class.create();
DataLookupUtils.prototype = {
    initialize: function(tableName, sortByColumn) {
        this.tableName = tableName;
        this.columnNames = this._getColumnNames(tableName);
		this.queryColumns = this.columnNames;
		
		sortByColumn = sortByColumn || false;
        this.sortColumn = sortByColumn ? DataLookupUtils.SORT_BY_COLUMN : DataLookupUtils.SORT_BY_ORDER; // optional, use the field being retrieved or the built in order field
    },

	/**
	 * query lookup data
	 * can accept either an array of keys, or multiple parameters
	 * e.g
	 *    getLookupData('key1', 'key2', 'key3');
	 *    getLookupData(['key1', 'key2', 'key3']);
	 */
    getLookupData: function(_keys) {
        var keys = [];
        if (_keys && typeof _keys != 'object') {
            for (var _arg in arguments) {
                keys.push(arguments[_arg]);
            }
        } else {
            keys = _keys;
        }
		
        if (keys.length >= this.queryColumns.length) {
            NiceError.raise(gs.getMessage("Too many keys ({0}) provided.  Maximum is {1}", [keys.length.toString(), (this.queryColumns.length - 1).toString()]));
        }

        try {
            var fieldIdx = 0;
            var fieldName = this.queryColumns[fieldIdx];
            var gq = new global.GlideQuery(this.tableName)
                .where('active', true);

            if (keys.length > 0) {
                // loop through the keys
                keys.forEach(function(key, idx, arr) {
                    gq = gq.where(fieldName, key);
                    fieldName = this.queryColumns[++fieldIdx];
                }, this);
            }

            gq = gq.orderBy(this.sortColumn == DataLookupUtils.SORT_BY_COLUMN ? fieldName : 'order')
                .whereNotNull(fieldName)
                .select(fieldName)
                .map(function(_x) {
					// just need the data, not the other stuff
                    return _x[fieldName];
                })
                .reduce(function(arr, e) {
					// remove duplicates
                    if (arr.indexOf(e) == -1) arr.push(e);
                    return arr;
                }, []);

            return gq;
        } catch (e) {
            NiceError.raise(e);
        }
    },

	/**
	 * override the columns to use for lookups
	 * 
	 */
	setColumns: function(columns) {
		if (columns.length == 0) return;

		this.queryColumns = [];
		columns.forEach(function(_col) {
			if (this.columnNames.indexOf(_col) > -1) {
				this.queryColumns.push(_col);
			} else {
				NiceError.raise(gs.getMessage('Cannot find column {0}.  Valid columns are {1}', [ _col, this.columnNames.join(', ')]));
			}
		}, this);

	},
	
	/**
	 * build the list of column names for the table
	 * use the default system view for the table and exclude all system and inherited fields
	 * column order determines key lookup
	 */
    _getColumnNames: function() {
        return new global.GlideQuery('sys_ui_list_element')
            .where('list_id.name', this.tableName)
            .where('list_id.view', 'Default view')
            // ignore any system or inherited fields from the table
            .where('element', 'NOT IN', ['sys_class_name', 'sys_created_by', 'sys_created_on', 'sys_id', 'sys_mod_count', 'sys_name', 'sys_package', 'sys_policy', 'sys_scope', 'sys_updated_by', 'sys_updated_on', 'sys_update_name', 'active', 'order'])
            .whereNull('list_id.sys_user') // make sure we get the system view
            .orderBy('position')
            .select('element')
            .reduce(function(arr, e) {
                arr.push(e.element);
                return arr;
            }, []);
    },

    type: 'DataLookupUtils'
};

DataLookupUtils.SORT_BY_ORDER = 0;
DataLookupUtils.SORT_BY_COLUMN = 1;]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-27 14:04:38</sys_created_on>
        <sys_id>a89f5cd61b312110c5ba97d7bd4bcb4f</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>DataLookupUtils</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Lookup Utils">d5f34f7a1bf56110c5ba97d7bd4bcb26</sys_scope>
        <sys_update_name>sys_script_include_a89f5cd61b312110c5ba97d7bd4bcb4f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-30 08:00:56</sys_updated_on>
    </sys_script_include>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Data Lookup Utils">d5f34f7a1bf56110c5ba97d7bd4bcb26</claim_owner_scope>
        <claim_timestamp>1872defe7970000001</claim_timestamp>
        <metadata_update_name>sys_script_include_a89f5cd61b312110c5ba97d7bd4bcb4f</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>Data Lookup Utils</previous_claim_name>
        <previous_claim_scope>d5f34f7a1bf56110c5ba97d7bd4bcb26</previous_claim_scope>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-29 15:15:09</sys_created_on>
        <sys_id>44148f7a1bf56110c5ba97d7bd4bcb0d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-29 15:15:09</sys_updated_on>
    </sys_claim>
</record_update>
